package com.mkyong;
import java.util.concurrent.Semaphore;
public class SemaphoreTest {
// max 4 people
static Semaphore semaphore = new Semaphore(4);
static class MyATMThread extends Thread {
String name = &quot;&quot;;
MyATMThread(String name) {
this.name = name;
}
public void run() {
try {

System.out.println(name + &quot; : acquiring lock...&quot;);
System.out.println(name + &quot; : available Semaphore permits
now: &quot; + semaphore.availablePermits());
semaphore.acquire();
System.out.println(name + &quot; : got the permit!&quot;);
try {
for (int i = 1; i &lt;= 5; i++) {
System.out.println(name + &quot; : is performing operation
&quot; + i + &quot;, available Semaphore permits : &quot; +
semaphore.availablePermits());
// sleep 1 second
Thread.sleep(1000)

}
} finally {
// calling release() after a successful acquire()
System.out.println(name + &quot; : releasing lock...&quot;);
semaphore.release();
System.out.println(name + &quot; : available Semaphore
permits now: &quot; + semaphore.availablePermits());

}
} catch (InterruptedException e) {

e.printStackTrace();

}
}
}
public static void main(String[] args) {
System.out.println(&quot;Total available Semaphore permits : &quot;

+ semaphore.availablePermits());
MyATMThread t1 = new MyATMThread(&quot;A&quot;);
t1.start();
MyATMThread t2 = new MyATMThread(&quot;B&quot;);
t2.start();
MyATMThread t3 = new MyATMThread(&quot;C&quot;);
t3.start();
MyATMThread t4 = new MyATMThread(&quot;D&quot;);
t4.start();
MyATMThread t5 = new MyATMThread(&quot;E&quot;);
t5.start();
MyATMThread t6 = new MyATMThread(&quot;F&quot;);
t6.start();
}
}
